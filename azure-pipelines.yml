trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: GITHUB_PAT  # Reference your variable group here
  - name: REPO_DIR
    value: $(Build.SourcesDirectory)/Hexagon-_Tasks

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- script: |
    echo "##[section]Cloning Repository"
    git clone https://$(GITHUB_PAT)@github.com/Anish-blip/Hexagon-_Tasks.git
  displayName: 'Clone GitHub Repository'

- script: |
    echo "##[section]Installing Dependencies"
    pip install -r Hexagon-_Tasks/requirements.txt || true  # Modify this line to point to your requirements file if needed
  displayName: 'Install Dependencies'

- script: |
    echo "##[section]Running Python Scripts"
    cd Hexagon-_Tasks
    ls -l  # List the files in the repository for debugging
    mkdir -p $(Build.ArtifactStagingDirectory)  # Ensure the directory exists
    for file in *.py; do
      if [[ "$file" == "reverse_number.py" ]]; then
        echo "Running $file with argument 12345"
        python "$file" 12345 > "output_${file%.py}.txt" 2>&1 || { echo "Failed to run $file"; cat "output_${file%.py}.txt"; exit 1; }
      elif [[ "$file" == "sum.py" ]]; then
        echo "Running $file with argument 1234"
        python "$file" 1234 > "output_${file%.py}.txt" 2>&1 || { echo "Failed to run $file"; cat "output_${file%.py}.txt"; exit 1; }
      else
        echo "Running $file"
        python "$file" > "output_${file%.py}.txt" 2>&1 || { echo "Failed to run $file"; cat "output_${file%.py}.txt"; exit 1; }
      fi
      # Check if the output file was created
      if [ -f "output_${file%.py}.txt" ]; then
        echo "Output file for $file was created successfully."
      else
        echo "Output file for $file was not created."
        exit 1
      fi
    done
    echo "##[section]After running Python scripts"
    ls -l  # List the files again to verify if the output files were created
  displayName: 'Run Python Scripts'

- script: |
    echo "##[section]Gathering Results"
    ls -l  # List the contents of the directory before copying
    cp output_*.txt $(Build.ArtifactStagingDirectory)/
  displayName: 'Gather Results'

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)/*.txt'
    artifactName: 'output'
    publishLocation: 'Container'

- script: |
    echo "##[section]Pushing Results to GitHub"
    cd Hexagon-_Tasks
    git config --global user.name "Anish-blip"
    git config --global user.email "your-email@example.com"
    git add output_*.txt
    git commit -m "Add script outputs"
    git push https://$(GITHUB_PAT)@github.com/Anish-blip/Hexagon-_Tasks.git
  displayName: 'Push Results to GitHub'
